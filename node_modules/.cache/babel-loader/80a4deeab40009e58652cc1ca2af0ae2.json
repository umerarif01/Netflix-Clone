{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Umer\\\\Desktop\\\\netflix--main\\\\src\\\\components\\\\movierow\\\\movieRow.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport \"../movierow/_movieRow.styles.scss\"; //API\n\nimport axios from \"../../axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MovieRow = ({\n  title,\n  fetchUrl,\n  isLargeRow = false\n}) => {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const base_url = \"https://image.tmdb.org/t/p/original/\";\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  console.log(movies);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rowPosters_container\",\n      children: movies.map(movie => (isLargeRow && movie.poster_path || !isLargeRow && movie.backdrop_path) && /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `rowPoster ${isLargeRow && \"rowPoster_large\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MovieRow, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\n_c = MovieRow;\nexport default MovieRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieRow\");","map":{"version":3,"sources":["C:/Users/Umer/Desktop/netflix--main/src/components/movierow/movieRow.component.jsx"],"names":["React","useState","useEffect","axios","MovieRow","title","fetchUrl","isLargeRow","movies","setMovies","base_url","fetchData","request","get","data","results","console","log","map","movie","poster_path","backdrop_path","name","id"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,mCAAP,C,CAEA;;AACA,OAAOC,KAAP,MAAkB,aAAlB;;;AASA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA,UAAU,GAAG;AAA/B,CAAD,KAA2C;AAAA;;AAExD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAMS,QAAQ,GAAG,sCAAjB;AAEAR,EAAAA,SAAS,CAAC,MAAM;AAEZ,mBAAeS,SAAf,GAA0B;AAEtB,YAAMC,OAAO,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAUP,QAAV,CAAtB;AAEAG,MAAAA,SAAS,CAACG,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AAEA,aAAOH,OAAP;AAEH;;AAEDD,IAAAA,SAAS;AAEZ,GAdQ,EAcN,CAACL,QAAD,CAdM,CAAT;AAgBAU,EAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AAEA,sBAEI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAEI;AAAA,gBAAKH;AAAL;AAAA;AAAA;AAAA;AAAA,YAFJ,eAII;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,gBAEKG,MAAM,CAACU,GAAP,CAAYC,KAAD,IAER,CAAEZ,UAAU,IAAIY,KAAK,CAACC,WAArB,IACC,CAACb,UAAD,IAAeY,KAAK,CAACE,aADvB,kBAII;AAEI,QAAA,SAAS,EAAG,aAAYd,UAAU,IAAI,iBAAmB,EAF7D;AAII,QAAA,GAAG,EAAG,GAAEG,QAAS,GAAGH,UAAU,GAAGY,KAAK,CAACC,WAAT,GAAuBD,KAAK,CAACE,aAAe,EAJ9E;AAKI,QAAA,GAAG,EAAEF,KAAK,CAACG;AALf,SAGSH,KAAK,CAACI,EAHf;AAAA;AAAA;AAAA;AAAA,cANP;AAFL;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAiCH,CAzDD;;GAAMnB,Q;;KAAAA,Q;AA2DN,eAAeA,QAAf","sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport \"../movierow/_movieRow.styles.scss\";\n\n//API\nimport axios from \"../../axios\";\n\n\n\n\n\n\n\n\nconst MovieRow = ({title, fetchUrl, isLargeRow = false}) => {\n\n    const [movies, setMovies] = useState([]);\n\n    const base_url = \"https://image.tmdb.org/t/p/original/\";\n\n    useEffect(() => {\n\n        async function fetchData(){\n\n            const request = await axios.get(fetchUrl);\n\n            setMovies(request.data.results);\n\n            return request;\n\n        }\n\n        fetchData();\n\n    }, [fetchUrl]);\n\n    console.log(movies);\n\n    return (\n\n        <div className=\"row\">\n\n            <h2>{title}</h2>\n\n            <div className=\"rowPosters_container\">\n\n                {movies.map((movie) => \n\n                    ((isLargeRow && movie.poster_path) ||\n                     (!isLargeRow && movie.backdrop_path)) && (\n\n\n                        <img \n\n                            className={`rowPoster ${isLargeRow && \"rowPoster_large\" }`}\n                            key={movie.id}\n                            src={`${base_url}${ isLargeRow ? movie.poster_path : movie.backdrop_path }`}\n                            alt={movie.name} \n                        \n                        />\n\n                    )\n\n                   \n                )}\n\n            </div>\n\n            \n        </div>\n    )\n}\n\nexport default MovieRow;\n"]},"metadata":{},"sourceType":"module"}